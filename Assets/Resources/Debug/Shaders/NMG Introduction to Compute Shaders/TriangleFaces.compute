#pragma kernel Main

#include "NMGComputeHelpers.hlsl"

struct SourceVertex
{
	float3 position; //Object space
	float2 uv;
};

struct VertexOut
{
	float3 position; //World space
	float2 uv;
};

struct TriangleOut
{
	VertexOut vertices[3];
	float3 normal; //all vertices in the triangle will share the normal
};

StructuredBuffer<SourceVertex> verticesIn;
StructuredBuffer<int> trianglesIn;
AppendStructuredBuffer<TriangleOut> trianglesOut;

//properties to be set by c# script
int numSourceTriangles;
float height;
float4x4 localToWorld;

VertexOut TransformToWorldSpace(SourceVertex v)
{
	VertexOut o;
	o.position = mul(localToWorld, float4(v.position, 1)).xyz;
	o.uv = v.uv;
	return o;
}

void OutputTriangle(VertexOut a, VertexOut b, VertexOut c)
{
	TriangleOut triOut;
	triOut.normal = GetNormalFromTriangle(a.position, b.position, c.position);
	triOut.vertices[0] = a;
	triOut.vertices[1] = b;
	triOut.vertices[2] = c;
	trianglesOut.Append(triOut);
}

[numthreads(128,1,1)]
void Main (uint3 id : SV_DispatchThreadID)
{
	if((int)id.x >= numSourceTriangles) //repeats for all triangles, exits if done all
	{
		return;
	}

	//get the source triangle from the source geometry buffer
	//get triangle start index
	//retrieve each index of each vertex from the triangle buffer
	//get the data of each vertex from the vertex buffer
	//convert each vertex to world space

	int triStart = id.x * 3;
	VertexOut v[3];
	v[0] = TransformToWorldSpace(verticesIn[ trianglesIn[triStart+0] ]);
	v[1] = TransformToWorldSpace(verticesIn[ trianglesIn[triStart+1] ]);
	v[2] = TransformToWorldSpace(verticesIn[ trianglesIn[triStart+2] ]);

	VertexOut centre;
	centre.uv = GetTriangleCenter(v[0].uv, v[1].uv, v[2].uv);
	centre.position = GetTriangleCenter(v[0].position, v[1].position, v[2].position) + (GetNormalFromTriangle(v[0].position, v[1].position, v[2].position) * height);
	OutputTriangle(v[0], v[1], centre);
	OutputTriangle(v[1], v[2], centre);
	OutputTriangle(v[2], v[0], centre);
}
